% placefield identifies the placefields in the firing map. It returns the
% number of placefields and the location of the peak within each
% placefield.
%
% map           Rate map
% pTreshold     Field treshold
% pBins         Minimum number of bins in a field
% mapAxis       The map axis
function [nFields,fieldProp] = placefield_circ_CZ(map,p,mapAxis,nc,region,date_ns,Ind_Rat_ns,nseg,nl)

binWidth = mapAxis(2) - mapAxis(1);
nbins = length(mapAxis);

% Counter for the number of fields
nFields = 0;
% Field properties will be stored in this struct array
fieldProp = [];

% Allocate memory to the arrays
N = length(map);
% Array that contain the bins of the map this algorithm has visited
visited = zeros(N,1);
nanInd = isnan(map);
visited(nanInd) = 1;
visited2 = visited;
% peak all
peak_alltrack = nanmax(map);
% mean all
mean_alltrack = nanmean(map);
% Go as long as there are unvisited parts of the map left
while ~prod(visited)
    
    % Find the current maximum
    [peak, peakBin] = nanmax(map);
    
    % Array that will contain the bin positions to the current placefield
    fieldBins = peakBin;
    
    % Check if peak rate is high enough
    if peak < p.lowestFieldRate
        break;
    end
    
    %visited2(map<p.fieldTreshold*peak_all) = 1; %changed by LLC to be the peak for slow and fast gamma together
    %visited2(map<p.fieldTreshold*peak) = 1;
    
    peak_all = p.fieldTreshold*peak;
    visited2(map < peak_all) = 1;
    
    
    % Find the bins that construct the peak field
    [fieldBins,visited2] = recursiveBins_circ(map, visited2, fieldBins, peakBin, N);
    fieldBins = sort(fieldBins);
    
    if length(fieldBins) >= p.minNumBins % Minimum size of a placefield
        nFields = nFields + 1;
        
        % Find centre of mass (com)
        ind = find(diff(fieldBins)>1);
        comX = 0;
        R = 0; % Total rate
        if length(ind) == 0
            % this place field is not across 0 degree border
            for ii = 1:length(fieldBins)
                R = R + map(fieldBins(ii));
                comX = comX + map(fieldBins(ii)) * fieldBins(ii);
            end
            startFieldBin = min(fieldBins);
            stopFieldBin = max(fieldBins);
        elseif  length(ind) == 1
            % this place field is across 0 degree border
            fieldBins_shift1 = [fieldBins(ind+1:end);fieldBins(1:ind)];
            fieldBins_shift2 = [fieldBins(ind+1:end);fieldBins(1:ind)+N];
            for ii = 1:length(fieldBins_shift1)
                R = R + map(fieldBins_shift1(ii));
                comX = comX + map(fieldBins_shift1(ii)) * fieldBins_shift2(ii);
            end
            startFieldBin = fieldBins(ind+1);
            stopFieldBin = fieldBins(ind);
        end
        ind_Com = comX/R;
        ind_Com = mod(ind_Com,nbins);
        if ind_Com == 0
            ind_Com =nbins;
        end
        Com = mapAxis(ceil(ind_Com))-(ceil(ind_Com)-ind_Com)*binWidth;
        
        % Average rate in field
        avgRate = nanmean(map(fieldBins));
        % Peak rate in field
        peakRate = nanmax(map(fieldBins));
        % Size of field
        fieldSize = length(fieldBins) * binWidth;
        % Put the field properties in the struct array
        
        fieldProp = [fieldProp; struct('peak_all',peak_alltrack,'mean_all',mean_alltrack,'x_COM',Com,'x_peak',mapAxis(peakBin),'avgRate',avgRate,'peakRate',peakRate,'size',fieldSize,'startBin',startFieldBin,'stopBin',stopFieldBin)];
        %%%===========画每个cell每个位置域的热图==============%%%
%         figure(1);
%         clf
%         text = 'on';
%         map_now = zeros(N,1);
%         map_now(fieldBins) = map(fieldBins);
%         drawfield_Ang(map_now,mapAxis,'jet',peakRate,nc,date_ns,text);
%         set(gcf,'Color', [1 1 1]);%KJ changed from 1 1 1
%         axis square
%         drawnow;
%         fig_dir = strcat('C:\Users\tju\Desktop\all cell\lap ratemap\');
%         filename = strcat(fig_dir,region,'Rat',num2str(Ind_Rat_ns),'_',num2str(date_ns),'_cell',num2str(nc),'Seg',num2str(nseg),'lap',num2str(nl),'_No',num2str(nFields));
%         saveas(gcf,filename,'png');
        %%%===================================================%%%
    end
    visited(fieldBins) = 1;
    map(visited == 1) = 0;
end


function [binsX,visited] = recursiveBins_circ(map,visited,binsX,ii,N)
% edited by CZ on 03/16/2017
% for circular track

% If outside boundaries of map -> return.
if ii<1 || ii>N
    ii = mod(ii,N);
    if ii == 0
        ii = N;
    end
end
% If all bins are visited -> return.
if prod(visited)
    return;
end
if visited(ii) % This bin has been visited before
    return;
else
    binsX = [binsX;ii];
    visited(ii) = 1;
    % Call this function again in each of the 2 neighbour bins
    [binsX,visited] = recursiveBins_circ(map,visited,binsX,ii-1,N);
    [binsX,visited] = recursiveBins_circ(map,visited,binsX,ii+1,N);
end


function drawfield_Ang(map,faxis,cmap,maxrate,cellid,cell_file,text)

% This function will calculate an RGB image from the rate
% map. We do not just call image(map) and caxis([0 maxrate]),
% as it would plot unvisted parts with the same colour code
% as 0 Hz firing rate. Instead we give unvisited bins
% their own colour (e.g. gray or white).

maxrate = ceil(maxrate);
if maxrate < 1
    maxrate = 1;
end
n = size(map,1);

r=1;
bin=2*pi/n;
ang_border=linspace(0,2*pi,n+1);
ang_border_1=ang_border(1:end-1);
ang_border_2=ang_border(2:end)+bin/5;
xp1=r*cos(ang_border_1);
yp1=-r*sin(ang_border_1);
xp2=r*cos(ang_border_2);
yp2=-r*sin(ang_border_2);

hold on
for ii = 1:n
    if isnan(map(ii))
        plotmap = [1 1 1];
    elseif map(ii) > maxrate
        plotmap = [1 0 0];
    else
        rgb = pixelcolour(map(ii),maxrate,cmap);
        plotmap = rgb;
    end
    plot([xp1(ii),xp2(ii)],[yp1(ii),yp2(ii)],'color',plotmap,'linewidth',20);
end
hold off
xlim([-1.2,1.2])
ylim([-1.2,1.2])
axis off

if strcmp(text,'on')
    title(strcat(cell_file,'cell',num2str(cellid),'-Peak',num2str(maxrate), ' Hz)'),'FontSize',20);
    %title(strcat(cellid,'?(0 - ',num2str(maxrate), ' Hz)','?',cell_file),'FontSize',20);
end


function rgb = pixelcolour(map,maxrate,cmap)

% This function calculates a colour for each bin
% in the rate map.

cmap1 = ...
    [    0         0    0.5625; ...
    0         0    0.6875; ...
    0         0    0.8125; ...
    0         0    0.9375; ...
    0    0.0625    1.0000; ...
    0    0.1875    1.0000; ...
    0    0.3125    1.0000; ...
    0    0.4375    1.0000; ...
    0    0.5625    1.0000; ...
    0    0.6875    1.0000; ...
    0    0.8125    1.0000; ...
    0    0.9375    1.0000; ...
    0.0625    1.0000    1.0000; ...
    0.1875    1.0000    0.8750; ...
    0.3125    1.0000    0.7500; ...
    0.4375    1.0000    0.6250; ...
    0.5625    1.0000    0.5000; ...
    0.6875    1.0000    0.3750; ...
    0.8125    1.0000    0.2500; ...
    0.9375    1.0000    0.1250; ...
    1.0000    1.0000         0; ...
    1.0000    0.8750         0; ...
    1.0000    0.7500         0; ...
    1.0000    0.6250         0; ...
    1.0000    0.5000         0; ...
    1.0000    0.3750         0; ...
    1.0000    0.2500         0; ...
    1.0000    0.1250         0; ...
    1.0000         0         0; ...
    0.8750         0         0; ...
    0.7500         0         0; ...
    0.6250         0         0 ];

cmap2 = ...
    [0.0417         0         0; ...
    0.1250         0         0; ...
    0.2083         0         0; ...
    0.2917         0         0; ...
    0.3750         0         0; ...
    0.4583         0         0; ...
    0.5417         0         0; ...
    0.6250         0         0; ...
    0.7083         0         0; ...
    0.7917         0         0; ...
    0.8750         0         0; ...
    0.9583         0         0; ...
    1.0000    0.0417         0; ...
    1.0000    0.1250         0; ...
    1.0000    0.2083         0; ...
    1.0000    0.2917         0; ...
    1.0000    0.3750         0; ...
    1.0000    0.4583         0; ...
    1.0000    0.5417         0; ...
    1.0000    0.6250         0; ...
    1.0000    0.7083         0; ...
    1.0000    0.7917         0; ...
    1.0000    0.8750         0; ...
    1.0000    0.9583         0; ...
    1.0000    1.0000    0.0625; ...
    1.0000    1.0000    0.1875; ...
    1.0000    1.0000    0.3125; ...
    1.0000    1.0000    0.4375; ...
    1.0000    1.0000    0.5625; ...
    1.0000    1.0000    0.6875; ...
    1.0000    1.0000    0.8125; ...
    1.0000    1.0000    0.9375];

if strcmp(cmap,'jet')
    steps = (31*(map/maxrate))+1;
    steps = round(steps);
    rgb = cmap1(steps,:);
else
    steps = (31*(map/maxrate))+1;
    steps = round(steps);
    rgb = cmap2(steps,:);
end
